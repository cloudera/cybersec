{
  "name": "CYBERSEC",
  "label": "Cybersec",
  "description": "Cyber security project.",
  "version": "2.3.0",
  "compatibility": {
    "cdhVersion": {
      "min": "7.1.6"
    }
  },
  "runAs": {
    "user": "cybersec",
    "group": "cybersec",
    "principal": "cybersec"
  },
  "icon": "images/cybersec.svg",
  "parcel": {
    "repoUrl": "https://archive.cloudera.com/p/csa/1.6/parcels",
    "requiredTags": [
      "cybersec",
      "flink",
      "cdh"
    ],
    "optionalTags": [
      "cybersec-plugin"
    ]
  },
  "serviceDependencies": [
    {
      "name": "FLINK",
      "required": "true"
    },
    {
      "name": "KAFKA",
      "required": "false"
    },
    {
      "name": "RANGER",
      "required": "false"
    }
  ],
  "dependencyExtensions": [
    {
      "type": "kafkaDependency",
      "extensionId": "kafka_dependency"
    },
    {
      "type" : "rangerPlugin",
      "extensionId": "ranger_plugin",
      "pluginType": "CYBERSEC",
      "repositoryStrategy" : "uniquePerService"
    },
    {
      "type": "clusterInfo",
      "extensionId": "cluster_info"
    }
  ],
  "hdfsDirs": [
    {
      "name": "CreateCybersecUserDirCommand",
      "label": "Create cybersec user directory",
      "description": "Creates the directory in HDFS for the cybersec user.",
      "directoryDescription": "Cybersec User Directory (HDFS)",
      "path": "/user/cybersec/",
      "permissions": "1755"
    },
    {
      "name": "CreateCybersecDataDirCommand",
      "label": "Create cybersec data directory",
      "description": "Creates the directory in HDFS for the cybersec data.",
      "directoryDescription": "Cybersec data directory (HDFS)",
      "path": "/user/cybersec/data",
      "permissions": "1755"
    },
    {
      "name": "CreateCybersecStellarDirCommand",
      "label": "Create cybersec stellar directory",
      "description": "Creates the directory in HDFS for the cybersec stellar configs.",
      "directoryDescription": "Cybersec stellar directory (HDFS)",
      "path": "/user/cybersec/data/stellar",
      "permissions": "1755"
    }
  ],
  "serviceInit" : {
    "preStartSteps" : [
      {
        "commandName" : "CreateCybersecUserDirCommand"
      },
      {
        "commandName" : "CreateCybersecDataDirCommand"
      },
      {
        "commandName" : "CreateCybersecStellarDirCommand"
      }
    ]
  },
  "kerberos": "${kerberos_auth_enabled}",
  "parameters": [
    {
      "name": "kerberos_auth_enabled",
      "label": "Enable Kerberos Authentication",
      "description": "Enables Kerberos authentication for Cybersec",
      "type": "boolean",
      "default": "false",
      "configurableInWizard": true
    }
  ],
  "rolesWithExternalLinks" : ["PARSER_CHAINING"],
  "roles" : [
    {
      "name" : "PARSER_CHAINING",
      "label" : "Parser Chaining",
      "pluralLabel" : "Parser Chainings",
      "jvmBased": true,
      "startRunner" : {
        "program" : "scripts/control.sh",
        "args" : [ "start-parser-ui" ],
        "environmentVariables": {
          "SERVER_SSL_KEY_STORE": "${ssl_server_keystore_location}",
          "SERVER_SSL_KEY_STORE_PASSWORD": "${ssl_server_keystore_password}",
          "SERVER_SSL_KEY_PASSWORD": "${ssl_server_keystore_keypassword}",
          "SERVER_SSL_KEY_STORE_TYPE": "jks",
          "SERVER_SSL_ENABLED": "${ssl_enabled}",
          "ENABLE_SECURITY" : "${kerberos_auth_enabled}",
          "CYBERSEC_TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "CYBERSEC_TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}",
          "CYBERSEC_KEYSTORE_LOCATION": "${ssl_server_keystore_location}",
          "CYBERSEC_KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "RANGER_KEYSTORE_TYPE": "${keystore_type}",
          "RANGER_SERVICE": "${dependency:RANGER}",
          "RANGER_AUDIT_BASE_PATH": "${ranger_base_audit_url}",
          "RANGER_CYBERSEC_SERVICE_NAME": "${ranger_cybersec_plugin_service_name}",
          "RANGER_REST_URL" : "${ranger_rest_url}",
          "CLUSTER_NAME" : "${cluster_name}",
          "RANGER_REPO_NAME" : "${ranger_repo_name}",
          "cybersec_service_user_name": "${user}",
          "cybersec_principal_name": "${principal}"
        }
      },
      "externalLink" : {
        "name" : "parser_web_ui",
        "label" : "Parser Chaining",
        "url" : "http://${host}:${parser_ui_port}",
        "secureUrl": "https://${host}:${parser_ui_port}"
      },
      "topology": {
        "minInstances": 0,
        "softMinInstances": 1,
        "softMaxInstances": 1
      },
      "logging": {
        "dir": "/var/log/cybersec",
        "configFilename": "cybersec-conf/logback.xml",
        "filename": "parser-ui-${host}.log",
        "configName": "logging.config",
        "modifiable": true,
        "loggingType": "logback",
        "additionalConfigs": [
          {
            "key": "logger1",
            "value": "<logger  name=\"org.springframework\" level=\"${logging_org_springframework_level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger2",
            "value": "<logger name=\"com.cloudera.cyber\" level=\"${logging_com_cloudera_cyber_level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger3",
            "value": "<logger name=\"com.cloudera.parserchains\" level=\"${logging_com_cloudera_parserchains_level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger4",
            "value": "<logger name=\"org.apache.metron\" level=\"${logging_org_apache_metron_level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger5",
            "value": "<logger name=\"org.apache.flink\" level=\"${logging_org_apache_flink_level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger6",
            "value": "<logger name=\"org.apache\" level=\"INFO\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          }
        ]
      },
      "parameters" : [
        {
          "name": "parser_ui_port",
          "label": "Parser Chaining UI port",
          "description": "Port of the Parser Chaining web interface.",
          "configName": "server.port",
          "type": "string",
          "default": "28922"
        },
        {
          "name": "config_path",
          "label": "Parser Chaining UI port",
          "description": "Port of the Parser Chaining web interface.",
          "configName": "config.path",
          "type": "string",
          "default": "/var/lib/cybersec"
        },
        {
          "name": "enable_trusted_proxy",
          "label": "Enable Kerberos Authentication with Trusted Proxy",
          "description": "Enables knox as Trusted proxy with Kerberos authentication for this SMM service.",
          "configName": "enable.trusted.proxy",
          "type": "boolean",
          "default": "true",
          "configurableInWizard": true
        },
        {
          "name": "logging_org_springframework_level",
          "label": "Logger Level for org.springframework",
          "description": "Sets the logging level for the org.springframework. This determines the verbosity of the logs generated by the package, allowing for finer control over log output.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging_com_cloudera_cyber_level",
          "label": "Logger Level for com.cloudera.cyber",
          "description": "Sets the logging level for the com.cloudera.cyber. This determines the verbosity of the logs generated by the package, allowing for finer control over log output.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging_com_cloudera_parserchains_level",
          "label": "Logger Level for com.cloudera.parserchains",
          "description": "Sets the logging level for the com.cloudera.parserchains. This determines the verbosity of the logs generated by the package, allowing for finer control over log output.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging_org_apache_metron_level",
          "label": "Logger Level for org.apache.metron.level",
          "description": "Sets the logging level for the org.apache.metron.level. This determines the verbosity of the logs generated by the package, allowing for finer control over log output.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging_org_apache_flink_level",
          "label": "Logger Level for org.apache.flink",
          "description": "Sets the logging level for the org.apache.flink package. This determines the verbosity of the logs generated by the package, allowing for finer control over log output.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "ranger_cybersec_plugin_service_name",
          "label": "Ranger service name for this Cybersec service",
          "description": "Name of the Cybersec Ranger service, that is used for authorization by this Cybersec service. If this parameter is set to the placeholder value '{{GENERATED_RANGER_SERVICE_NAME}}', a generated service name will be used, and if necessary, created. The generated service name will refer to the name of the cluster and the name of this Cybersec service. The name can consist of alphanumeric and '_' characters.",
          "configName": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.service.name",
          "conformRegex" : "[\\p{Alnum}_\\{\\}]+",
          "default": "cm_cybersec",
          "type": "string"
        },
        {
          "name": "ranger_cybersec_plugin_policy_cache_directory",
          "label": "Ranger Cybersec Plugin Policy Cache Directory Path",
          "description": "The directory where Ranger security policies are cached locally.",
          "configName": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.policy.cache.dir",
          "type": "path",
          "pathType": "localDataDir",
          "default": "/var/lib/ranger/cybersec/policy-cache",
          "required": "true",
          "mode": "0740"
        },
        {
          "name": "ranger_cybersec_plugin_use_x_forwarded_for_ipaddress",
          "label": "Ranger Plugin Use X-Forwarded For IP Address",
          "description": "The parameter is used for identifying the originating IP address of a user connecting to a component through proxy for audit logs.",
          "configName": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.use.x-forwarded-for.ipaddress",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "ranger_cybersec_plugin_trusted_proxy_ipaddress",
          "label": "Ranger Plugin Trusted Proxy IP Address",
          "description": "Accepts a list of IP addresses of proxy servers for trusting.",
          "configName": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.trusted.proxy.ipaddress",
          "type": "string"
        }
      ],
      "kerberosPrincipals": [
        {
          "name": "cybersec_principal",
          "primary": "${principal}",
          "instance": "${host}"
        },
        {
          "name": "spnego_principal",
          "primary": "HTTP",
          "instance": "${host}"
        }
      ],
      "sslServer": {
        "keyIdentifier" : "parser_ui_chaining",
        "enabledConfigName" : "ssl_enabled",
        "keystoreLocationConfigName" : "ssl_server_keystore_location",
        "keystorePasswordConfigName" : "ssl_server_keystore_password",
        "keyPasswordOptionality" : "required",
        "keystoreKeyPasswordConfigName" : "ssl_server_keystore_keypassword",
        "autoTlsMode": "auto"
      },
      "sslClient": {
        "truststoreLocationConfigName" : "security.ssl.rest.truststore",
        "truststorePasswordConfigName" : "security.ssl.rest.truststore-password"
      },
      "configWriter" : {
        "generators" : [
          {
            "filename": "cybersec-conf/parser-ui.properties",
            "configFormat": "properties",
            "kerberosPrincipals": [
            ],
            "includedParams": [
              "parser_ui_port",
              "config_path",
              "enable_trusted_proxy"
             ],
            "additionalConfigs": [
              {
                "key": "logging.config",
                "value": "cybersec-conf/logback.xml"
              },
              {
                "key": "security.kerberos.enabled",
                "value": "${kerberos_auth_enabled}"
              },
              {
                "key": "security.kerberos.spnego.keytab",
                "value": "{{KEYTAB_FILE}}"
              },
              {
                "key": "security.kerberos.serviceName",
                "value": "${ranger_cybersec_plugin_service_name}"
              },
              {
                "key": "security.kerberos.appId",
                "value": "${ranger_cybersec_plugin_service_name}"
              }
            ]
          },
          {
          "filename": "ranger-cybersec-security.xml",
          "configFormat": "hadoop_xml",
          "includedParams": [
            "ranger_cybersec_plugin_policy_cache_directory",
            "ranger_cybersec_plugin_use_x_forwarded_for_ipaddress",
            "ranger_cybersec_plugin_trusted_proxy_ipaddress",
            "ranger_cybersec_plugin_service_name"
          ],
          "additionalConfigs": [
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.policy.rest.url",
              "value": "${ranger_rest_url}"
            },
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.policy.source.impl",
              "value": "org.apache.ranger.admin.client.RangerAdminRESTClient"
            },
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.policy.rest.ssl.config.file",
              "value": "{{RANGER_CYBERSEC_PLUGIN_SSL_FILE}}"
            },
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.policy.pollIntervalMs",
              "value": "30000"
            },
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.access.cluster.name",
              "value": "${cluster_display_name}"
            },
            {
              "key": "ranger.plugin.{{CYBERSEC_SERVICE_NAME}}.disable.cache.if.servicenotfound",
              "value": "false"
            }
          ]
          },
          {
            "filename": "ranger-cybersec-policymgr-ssl.xml",
            "configFormat": "hadoop_xml",
            "includedParams": [],
            "additionalConfigs": [
              {
                "key": "xasecure.policymgr.clientssl.truststore",
                "value": "{{RANGER_PLUGIN_TRUSTSTORE}}"
              },
              {
                "key": "xasecure.policymgr.clientssl.truststore.credential.file",
                "value": "{{RANGER_PLUGIN_TRUSTSTORE_CRED_FILE}}"
              },
              {
                "key": "xasecure.policymgr.clientssl.keystore",
                "value": "{{RANGER_PLUGIN_KEYSTORE}}"
              },
              {
                "key": "xasecure.policymgr.clientssl.keystore.credential.file",
                "value": "{{RANGER_PLUGIN_KEYSTORE_CRED_FILE}}"
              },
              {
                "key": "xasecure.policymgr.clientssl.truststore.type",
                "value": "${keystore_type}"
              },
              {
                "key": "xasecure.policymgr.clientssl.keystore.type",
                "value": "${keystore_type}"
              }
            ]
          },
          {
            "filename": "ranger-cybersec-audit.xml",
            "configFormat": "hadoop_xml",
            "kerberosPrincipals": [
              {
                "principalName": "cybersec_principal",
                "propertyName": "xasecure.audit.jaas.Client.option.principal",
                "instanceWildcard": "_HOST"
              }
            ],
            "additionalConfigs": [
              {
                "key": "xasecure.audit.is.enabled",
                "value": "true"
              },
              {
                "key": "xasecure.audit.destination.hdfs",
                "value": "true"
              },
              {
                "key": "xasecure.audit.destination.hdfs.dir",
                "value": "{{RANGER_KUDU_HDFS_AUDIT_PATH}}"
              },
              {
                "key": "xasecure.audit.destination.solr",
                "value": "true"
              },
              {
                "key": "xasecure.audit.destination.solr.zookeepers",
                "value": "${solr_audit_collection}"
              },
              {
                "key": "xasecure.audit.provider.summary.enabled",
                "value": "true"
              },
              {
                "key": "xasecure.audit.jaas.Client.loginModuleName",
                "value": "com.sun.security.auth.module.Krb5LoginModule"
              },
              {
                "key": "xasecure.audit.jaas.Client.loginModuleControlFlag",
                "value": "required"
              },
              {
                "key": "xasecure.audit.jaas.Client.option.useKeyTab",
                "value": "true"
              },
              {
                "key": "xasecure.audit.jaas.Client.option.storeKey",
                "value": "false"
              },
              {
                "key": "xasecure.audit.jaas.Client.option.serviceName",
                "value": "solr"
              },
              {
                "key": "xasecure.audit.destination.solr.force.use.inmemory.jaas.config",
                "value": "true"
              },
              {
                "key": "xasecure.audit.jaas.Client.option.keyTab",
                "value": "{{KEYTAB_FILE}}"
              },
              {
                "key": "xasecure.audit.destination.metrics",
                "value": "true"
              }
            ]
          }
        ]
      }
    }
  ],
  "gateway": {
    "alternatives": {
      "name": "cybersec-conf",
      "linkRoot": "/etc/cybersec",
      "priority": 50
    },
    "scriptRunner": {
      "program": "scripts/control.sh",
      "environmentVariables": {
        "KERBEROS_ENABLED": "${kerberos_auth_enabled}"
      },
      "args": [
        "client"
      ]
    },
    "sslClient": {
      "truststoreFormat": "jks",
      "truststoreLocationConfigName": "ssl.client.truststore.location",
      "truststorePasswordConfigName": "ssl.client.truststore.password",
      "truststorePasswordCredentialProviderCompatible": true,
      "autoTlsMode": "auto"
    },
    "configWriter": {
      "generators": [
        {
          "filename": "cybersec-conf/kafka.properties",
          "configFormat": "jinja",
          "template": "aux/templates/kafka.properties.j2",
          "includedParams": [
            "ssl_client_truststore_location",
            "ssl_client_truststore_password",
            "schema_registry_url",
            "kafka_acks",
            "kafka_auto_offset_reset"
          ],
          "additionalConfigs": [
            {
              "key": "kafka.brokers.list",
              "value": "${kafka_brokers_list}"
            }
          ]
        },
        {
          "filename": "cybersec-conf/generator.properties",
          "configFormat": "properties",
          "includedParams": [
            "generator_eps",
            "generator_avro_flag",
            "generator_metrics",
            "default_parallelism",
            "default_checkpoint_interval_ms"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Generator"
            },
            {
              "key": "kafka.client.id",
              "value": "generator.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "generator.group.id"
            }
          ]
        },
        {
          "filename": "cybersec-conf/parser.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Parser"
            },
            {
              "key": "topic.output",
              "value": "triage.input"
            },
            {
              "key": "topic.error",
              "value": "parser.error"
            },
            {
              "key": "kafka.client.id",
              "value": "parser.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "parser.group.id"
            }
          ]
        },
        {
          "filename": "cybersec-conf/triage.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "enrichment_topic_input",
            "enrichment_topic_query_output",
            "query_input_topic",
            "query_output_topic",
            "geo_enabled",
            "geo_ip_fields",
            "geo_database_path",
            "asn_enabled",
            "asn_ip_fields",
            "asn_database_path",
            "hbase_enabled",
            "enrichments_config",
            "lookups_config_file",
            "rest_enabled",
            "rest_config_file",
            "stellar_enabled",
            "stellar_config_dir",
            "threatq_enabled",
            "threatq_config_file",
            "threatq_topic_input",
            "rules_enabled"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Triage"
            },
            {
              "key": "kafka.client.id",
              "value": "triage.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "triage.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.input"
            },
            {
              "key": "topic.output",
              "value": "triage.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/profile.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "query_input_topic",
            "query_output_topic",
            "profile_first_seen_table",
            "profile_first_seen_column_family",
            "phoenix_db_init",
            "phoenix_db_thin_url",
            "phoenix_db_thin_serialization",
            "phoenix_db_thin_authentication",
            "phoenix_db_thin_avatica_user",
            "phoenix_db_thin_avatica_password",
            "phoenix_db_batchSize",
            "phoenix_db_query_param_measurement_data_table_name",
            "phoenix_db_query_param_measurement_metadata_table_name",
            "phoenix_db_query_param_measurement_sequence_name",
            "phoenix_db_query_param_profile_metadata_table_name",
            "phoenix_db_query_param_profile_profile_sequence_name",
            "phoenix_db_query_param_measurement_sequence_start_with",
            "phoenix_db_query_param_measurement_sequence_cache",
            "phoenix_db_query_param_profile_sequence_start_with",
            "phoenix_db_query_param_profile_sequence_cache",
            "phoenix_db_query_param_field_key_count",
            "phoenix_db_interval_millis",
            "phoenix_db_max_retries_times"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Profile"
            },
            {
              "key": "kafka.client.id",
              "value": "profile.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "profile.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.output"
            },
            {
              "key": "topic.output",
              "value": "profile.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/hive-indexing.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "hive_catalog",
            "hive_schema",
            "hive_table",
            "hive_confdir",
            "hive_include_all",
            "hive_transaction_messages"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Hive Indexing"
            },
            {
              "key": "kafka.client.id",
              "value": "hive.indexing.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "hive.indexing.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/load-enrichment.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "enrichment_config_file",
            "enrichment_source_file",
            "enrichment_source_skipfirstline",
            "enrichment_source_columns"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Enrichment Loading"
            }
          ]
        }
      ]
    },
    "parameters": [
      {
        "name": "schema_registry_url",
        "label": "Schema registry url",
        "description": "Schema registry server URL in the format http(s)://{schema-registry-host}:{schema-registry-port}/api/v1",
        "configName": "schema.registry.url",
        "type" : "uri",
        "allowedSchemes": [ "http", "https" ],
        "default" : "",
        "configurableInWizard": true
      },
      {
        "name": "kafka_auto_offset_reset",
        "label": " Kafka offset reset policy",
        "description": "The auto offset reset kafka consumer configuration defines how the kafka consumer should behave when consuming from a topic partition when there is no initial offset.",
        "configName": "kafka.auto.offset.reset",
        "type": "string_enum",
        "validValues": [
          "earliest",
          "latest"
        ],
        "default": "earliest"
      },
      {
        "name": "kafka_acks",
        "label": " Kafka client acknowledgements",
        "description": "Indicates the number of brokers that must receive a record before it is marked as a successful record.",
        "configName": "kafka.acks",
        "type": "string_enum",
        "validValues": [
          "0",
          "1",
          "all"
        ],
        "default": "all"
      },
      {
        "name": "generator_eps",
        "label": "Generator eps",
        "description": "Indicates the number of records generated by the generator per second.",
        "configName": "generator.eps",
        "type": "long",
        "min": 0,
        "default": 100
      },
      {
        "name": "generator_avro_flag",
        "label": "Generator Avro",
        "description": "Specifies whether the generator should create records in avro format.",
        "configName": "generator.avro.flag",
        "type": "boolean",
        "default": false
      },
      {
        "name": "generator_metrics",
        "label": "Generator metrics",
        "description": "Kafka topic for generator metrics.",
        "configName": "generator.metrics",
        "type": "string",
        "default": "generator.count"
      },
      {
        "name": "chain_file",
        "label": "Chain file path",
        "description": "Path to file with chain configuration",
        "configName": "chain.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "key_private_file",
        "label": "Key private file",
        "description": "Path to private key.",
        "configName": "key.private.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "chain_topic_map",
        "label": "Chain topic Map",
        "description": "Map topic to a configuration.",
        "configName": "chain.topic.map",
        "type": "string",
        "default": "{\"squid\" : {\"chainKey\": \"squid\", \"source\" : \"squid\"}}"
      },
      {
        "name": "chain_enrichments_file",
        "label": "Chain enrichments file",
        "description": "File with enrichment configuration.",
        "configName": "chain.enrichments.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichments_table_default",
        "label": "Batch loader hbase table",
        "description": "The default table where the batch loader job puts enrichment data in hbase.",
        "configName": "enrichments.table",
        "type": "string",
        "default": "simple_enrich"
      },
      {
        "name": "enrichments_config",
        "label": "Enrichment configuration",
        "description": "The default path to enrichment configuration file.",
        "configName": "enrichments.config",
        "type": "string",
        "default": ""
      },
      {
        "name": "lookups_config_file",
        "label": "Lookups configuration",
        "description": "The default path to lookups configuration file.",
        "configName": "lookups.config.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "signature_enabled",
        "label": "Signature enabled",
        "description": "Enable signature",
        "configName": "signature.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "default_parallelism",
        "label": "Job parallelism level",
        "description": "The default number of slots that a TaskManager offers.",
        "configName": "parallelism",
        "type": "long",
        "min": 0,
        "default": 1
      },
      {
        "name": "default_checkpoint_interval_ms",
        "label": "Checkpoint interval ms",
        "description": "Default checkpoint interval configures how often Flink will take these snapshots.",
        "configName": "checkpoint.interval.ms",
        "type": "long",
        "min": 0,
        "default": 60000
      },
      {
        "name": "geo_enabled",
        "label": "GEO feature",
        "description": "Enable the geoenrichment feature by default.",
        "configName": "geo.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "asn_enabled",
        "label": "ASN feature",
        "description": "Enable the asnenrichment feature by default.",
        "configName": "asn.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "hbase_enabled",
        "label": "Hbase enrichment feature",
        "description": "Enable the hbase enrichment feature by default.",
        "configName": "hbase.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "rest_enabled",
        "label": "Rest enrichment feature",
        "description": "Enable the rest enrichment feature by default.",
        "configName": "rest.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "rules_enabled",
        "label": "Rules enrichment feature",
        "description": "Enable the rule enrichment feature by default.",
        "configName": "rules.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "threatq_enabled",
        "label": "Threatq enrichment feature",
        "description": "Enable the threatq enrichment feature by default.",
        "configName": "threatq.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "stellar_enabled",
        "label": "Stellar enrichment feature",
        "description": "Enable the stellar enrichment feature by default.",
        "configName": "stellar.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "stellar_config_dir",
        "label": "Path to stellar dir",
        "description": "Path to directory with stellar configs.",
        "configName": "stellar.config.dir",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/stellar"
      },
      {
        "name": "query_input_topic",
        "label": "Scoring command input topic",
        "description": "Default input topic for scoring command.",
        "configName": "query.input.topic",
        "type": "string",
        "default": "scoring.rules.input"
      },
      {
        "name": "query_output_topic",
        "label": "Scoring command output topic",
        "description": "Default output topic for scoring command.",
        "configName": "query.output.topic",
        "type": "string",
        "default": "scoring.rules.out"
      },
      {
        "name": "rest_config_file",
        "label": "Rest config file",
        "description": "The default path to rest config file.",
        "configName": "rest.config.file",
        "type": "string",
        "default": "rest-config.json"
      },
      {
        "name": "threatq_config_file",
        "label": "Threatq config file",
        "description": "The default path to threatq config file.",
        "configName": "threatq.config.file",
        "type": "string",
        "default": "threatq.json"
      },
      {
        "name": "threatq_topic_input",
        "label": "Threatq topic ",
        "description": "The default topic of threatq data.",
        "configName": "threatq.topic.input",
        "type": "string",
        "default": "threats"
      },
      {
        "name": "geo_ip_fields",
        "label": "Geo fields",
        "description": "The list of fields that is used for GEO enrichment.",
        "configName": "geo.ip_fields",
        "type": "string",
        "default": "ip_src_addr,ip_dst_addr,ip_dst,ip_src"
      },
      {
        "name": "geo_database_path",
        "label": "Geo path",
        "description": "The path to MaxMind geo city database.",
        "configName": "geo.database_path",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/GeoLite2-City.mmdb"
      },
      {
        "name": "asn_ip_fields",
        "label": "Asn fields",
        "description": "The list of fields that is used for GEO enrichment.",
        "configName": "asn.ip_fields",
        "type": "string",
        "default": "ip_src_addr,ip_dst_addr,ip_dst,ip_src"
      },
      {
        "name": "asn_database_path",
        "label": "Asn path",
        "description": "The path to MaxMind asn database.",
        "configName": "asn.database_path",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/GeoLite2-ASN.mmdb"
      },
      {
        "name": "enrichment_topic_input",
        "label": "Enrichment input topic",
        "description": "Default enrichment topic for triage job.",
        "configName": "enrichment.topic.input",
        "type": "string",
        "default": "triage.enrichments"
      },
      {
        "name": "enrichment_topic_query_output",
        "label": "Enrichment output topic",
        "description": "Default enrichment output topic for triage job.",
        "configName": "enrichment.topic.query.output",
        "type": "string",
        "default": "triage.enrichments.response"
      },
      {
        "name": "profile_first_seen_table",
        "label": "Profile hbase table",
        "description": "Default hbase table for profiling job.",
        "configName": "profile.first.seen.table",
        "type": "string",
        "default": "enrichments"
      },
      {
        "name": "profile_first_seen_column_family",
        "label": "Profile hbase column family",
        "description": "Default hbase column family for profiling job.",
        "configName": "profile.first.seen.column.family",
        "type": "string",
        "default": "first_seen"
      },
      {
        "name": "phoenix_db_init",
        "label": "Phoenix initialize db",
        "description": "Init the phoenix database.",
        "configName": "phoenix.db.init",
        "type": "boolean",
        "default": true
      },
      {
        "name": "phoenix_db_thin_url",
        "label": "Phoenix db url",
        "description": "Phoenix to the avatica url.",
        "configName": "phoenix.db.thin.url",
        "type": "uri",
        "allowedSchemes": [ "http", "https" ],
        "default": "http://localhost.localhost:8765"
      },
      {
        "name": "phoenix_db_thin_serialization",
        "label": "Phoenix db thin serialization",
        "description": "Phoenix serialization schema.",
        "configName": "phoenix.db.thin.serialization",
        "type": "string",
        "default": "PROTOBUF"
      },
      {
        "name": "phoenix_db_thin_authentication",
        "label": "Phoenix authentication",
        "description": "Phoenix authentication mechanism.",
        "configName": "phoenix.db.thin.authentication",
        "type": "string",
        "default": "SPNEGO"
      },
      {
        "name": "phoenix_db_thin_avatica_user",
        "label": "Phoenix thin client user",
        "description": "Phoenix thin client user.",
        "configName": "phoenix.db.thin.avatica_user",
        "type": "string",
        "default": ""
      },
      {
        "name": "phoenix_db_thin_avatica_password",
        "label": "Phoenix thin client password",
        "description": "Phoenix thin client password.",
        "configName": "phoenix.db.thin.avatica_password",
        "type": "password",
        "default": ""
      },
      {
        "name": "phoenix_db_batchSize",
        "label": "Phoenix thin client password",
        "description": "Phoenix thin client password.",
        "configName": "phoenix.db.batchSize",
        "type": "long",
        "min": 0,
        "default": 40
      },
      {
        "name": "phoenix_db_query_param_measurement_data_table_name",
        "label": "Phoenix measurement data table",
        "description": "Phoenix measurement data table.",
        "configName": "phoenix.db.query.param.measurement_data_table_name",
        "type": "string",
        "default": "prf_measure"
      },
      {
        "name": "phoenix_db_query_param_measurement_metadata_table_name",
        "label": "Phoenix measurement meta data table",
        "description": "Phoenix measurement meta data table.",
        "configName": "phoenix.db.query.param.measurement_metadata_table_name",
        "type": "string",
        "default": "prf_measure_meta"
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_name",
        "label": "Phoenix sequence measurement id",
        "description": "Phoenix sequence measurement id.",
        "configName": "phoenix.db.query.param.measurement_sequence_name",
        "type": "string",
        "default": "prf_measure_seq"
      },
      {
        "name": "phoenix_db_query_param_profile_metadata_table_name",
        "label": "Phoenix profile meta data",
        "description": "Phoenix profile meta data.",
        "configName": "phoenix.db.query.param.profile_metadata_table_name",
        "type": "string",
        "default": "prf_meta"
      },
      {
        "name": "phoenix_db_query_param_profile_profile_sequence_name",
        "label": "Phoenix sequence for profile meta data",
        "description": "Phoenix sequence for profile meta data.",
        "configName": "phoenix.db.query.param.profile_sequence_name",
        "type": "string",
        "default": "prf_meta"
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_start_with",
        "label": "Phoenix measurement sequence start id",
        "description": "Phoenix measurement sequence id starts from.",
        "configName": "phoenix.db.query.param.measurement_sequence_start_with",
        "type": "long",
        "default": 0
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_cache",
        "label": "Phoenix sequence cache size",
        "description": "Phoenix measurement sequence cache size.",
        "configName": "phoenix.db.query.param.measurement_sequence_cache",
        "type": "long",
        "min": 0,
        "default": 20
      },
      {
        "name": "phoenix_db_query_param_profile_sequence_start_with",
        "label": "Phoenix sequence profile id starts",
        "description": "Phoenix sequence id starts from.",
        "configName": "phoenix.db.query.param.profile_sequence_start_with",
        "type": "long",
        "default": 0
      },
      {
        "name": "phoenix_db_query_param_profile_sequence_cache",
        "label": "Phoenix profile sequence cache size",
        "description": "Phoenix profile sequence cache size.",
        "configName": "phoenix.db.query.param.profile_sequence_cache",
        "type": "long",
        "min": 0,
        "default": 20
      },
      {
        "name": "phoenix_db_query_param_field_key_count",
        "label": "Phoenix field key count",
        "description": "Number of fields for profile types in phoenix.",
        "configName": "phoenix.db.query.param.field_key_count",
        "type": "long",
        "min": 0,
        "default": 10
      },
      {
        "name": "phoenix_db_interval_millis",
        "label": "Phoenix db interval millis",
        "description": "Phoenix minimal interval between transactions.",
        "configName": "phoenix.db.interval_millis",
        "type": "long",
        "min": 0,
        "default": 60000
      },
      {
        "name": "phoenix_db_max_retries_times",
        "label": "Phoenix minimal retries count",
        "description": "Phoenix minimal retries count.",
        "configName": "phoenix.db.max_retries_times",
        "type": "long",
        "min": 0,
        "default": 3
      },
      {
        "name": "hive_catalog",
        "label": "Hive catalog",
        "description": "Hive catalog.",
        "configName": "hive.catalog",
        "type": "string",
        "default": "hive"
      },
      {
        "name": "hive_schema",
        "label": "Hive schema",
        "description": "Hive catalog.",
        "configName": "hive.schema",
        "type": "string",
        "default": "cyber"
      },
      {
        "name": "hive_table",
        "label": "Hive table",
        "description": "Hive table.",
        "configName": "hive.table",
        "type": "string",
        "default": "events"
      },
      {
        "name": "hive_confdir",
        "label": "Hive configuration directory",
        "description": "Hive configuration directory.",
        "configName": "hive.confdir",
        "type": "string",
        "default": "/etc/hive/conf/"
      },
      {
        "name": "hive_include_all",
        "label": "Hive include all",
        "description": "Hive include all.",
        "configName": "hive.include.all",
        "type": "boolean",
        "default": true
      },
      {
        "name": "hive_transaction_messages",
        "label": "Hive transaction messages",
        "description": "Hive transaction messages.",
        "configName": "hive.transaction.messages",
        "type": "long",
        "min": 0,
        "default": 500
      },
      {
        "name": "enrichment_config_file",
        "label": "Enrichment loading file",
        "description": "The default enrichment loading configuration file.",
        "configName": "enrichment.config.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichment_source_file",
        "label": "Enrichment source file",
        "description": "The default enrichment loading source file.",
        "configName": "enrichment.source.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichment_source_skipfirstline",
        "label": "Skip first line",
        "description": "Skip the first line of source csv file for enrichment loading.",
        "configName": "enrichment.source.skipfirstline",
        "type": "boolean",
        "default": true
      },
      {
        "name": "enrichment_source_columns",
        "label": "Enrichment source columns",
        "description": "The list of enrichment loading columns.",
        "configName": "enrichment.source.columns",
        "type": "string",
        "default": "rank,,domain,,,,,,,,,"
      }
    ]
  }
}
