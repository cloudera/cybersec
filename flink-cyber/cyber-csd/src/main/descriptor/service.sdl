{
  "name": "CYBERSEC",
  "label": "Cybersec",
  "description": "Cyber security project.",
  "version": "2.3.0",
  "compatibility": {
    "cdhVersion": {
      "min": "7.1.6"
    }
  },
  "runAs": {
    "user": "cybersec",
    "group": "cybersec",
    "principal": "cybersec"
  },
  "icon": "images/cybersec.svg",
  "parcel": {
    "repoUrl": "https://archive.cloudera.com/p/csa/1.6/parcels",
    "requiredTags": [
      "cybersec",
      "flink",
      "cdh"
    ],
    "optionalTags": [
      "cybersec-plugin"
    ]
  },
  "serviceDependencies": [
    {
      "name": "FLINK",
      "required": "true"
    },
    {
      "name": "KAFKA",
      "required": "false"
    }
  ],
  "dependencyExtensions": [
    {
      "type": "kafkaDependency",
      "extensionId": "kafka_dependency"
    }
  ],
  "hdfsDirs": [
    {
      "name": "CreateCybersecUserDirCommand",
      "label": "Create cybersec user directory",
      "description": "Creates the directory in HDFS for the cybersec user.",
      "directoryDescription": "Cybersec User Directory (HDFS)",
      "path": "/user/cybersec/",
      "permissions": "1755"
    },
    {
      "name": "CreateCybersecDataDirCommand",
      "label": "Create cybersec data directory",
      "description": "Creates the directory in HDFS for the cybersec data.",
      "directoryDescription": "Cybersec data directory (HDFS)",
      "path": "/user/cybersec/data",
      "permissions": "1755"
    },
    {
      "name": "CreateCybersecStellarDirCommand",
      "label": "Create cybersec stellar directory",
      "description": "Creates the directory in HDFS for the cybersec stellar configs.",
      "directoryDescription": "Cybersec stellar directory (HDFS)",
      "path": "/user/cybersec/data/stellar",
      "permissions": "1755"
    }
  ],
  "serviceInit": {
    "preStartSteps": [
      {
        "commandName": "CreateCybersecUserDirCommand"
      },
      {
        "commandName": "CreateCybersecDataDirCommand"
      },
      {
        "commandName": "CreateCybersecStellarDirCommand"
      }
    ]
  },
  "kerberos": "${kerberos.auth.enabled}",
  "parameters": [
    {
      "name": "kerberos.auth.enabled",
      "label": "Enable Kerberos Authentication",
      "description": "Enables Kerberos authentication for Cybersec",
      "type": "boolean",
      "default": "false",
      "configurableInWizard": true
    }
  ],
  "rolesWithExternalLinks": [
    "CYBERSEC_UI"
  ],
  "roles": [
    {
      "name": "CYBERSEC_UI",
      "label": "Cybersec UI",
      "pluralLabel": "Cybersec UI",
      "jvmBased": true,
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start-parser-ui"
        ],
        "environmentVariables": {
          "SERVER_SSL_KEY_STORE": "${ssl_server_keystore_location}",
          "SERVER_SSL_KEY_STORE_PASSWORD": "${ssl_server_keystore_password}",
          "SERVER_SSL_KEY_PASSWORD": "${ssl_server_keystore_keypassword}",
          "SERVER_SSL_KEY_STORE_TYPE": "jks",
          "SERVER_SSL_ENABLED": "${ssl_enabled}"
        }
      },
      "externalLink": {
        "name": "parser_web_ui",
        "label": "Parser Chaining",
        "url": "http://${host}:${server_ui_port}",
        "secureUrl": "https://${host}:${server_ui_port}"
      },
      "topology": {
        "maxInstances": "1"
      },
      "logging": {
        "dir": "/var/log/cybersec",
        "configFilename": "cybersec-conf/logback.xml",
        "filename": "cybersec-parser-ui-${host}.log",
        "configName": "logging.config",
        "modifiable": true,
        "loggingType": "logback",
        "additionalConfigs": [
          {
            "key": "logger1",
            "value": "<logger  name=\"org.springframework\" level=\"${logging.org.springframework.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger2",
            "value": "<logger name=\"com.cloudera.cyber\" level=\"${logging.com.cloudera.cyber.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger3",
            "value": "<logger name=\"com.cloudera.parserchains\" level=\"${logging.com.cloudera.parserchains.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger4",
            "value": "<logger name=\"org.apache.metron\" level=\"${logging.org.apache.metron.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger5",
            "value": "<logger name=\"org.apache.flink\" level=\"${logging.org.apache.flink.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger6",
            "value": "<logger name=\"org.apache\" level=\"INFO\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          }
        ]
      },
      "parameters": [
        {
          "name": "server_ui_port",
          "label": "Cybersec UI Port",
          "description": "The port number on which the Parser Chaining web interface listens. This port is used for accessing the web interface to configure and manage cybersec jobs, running a new pipeline or create parser chaining.",
          "configName": "server.port",
          "type": "port",
          "default": "28922"
        },
        {
          "name": "clusters_kafka_map",
          "label": "Kafka Clusters and Bootstrap Addresses",
          "description": "A map of Kafka cluster names to their corresponding bootstrap addresses. This configuration allows specifying multiple Kafka clusters with their bootstrap servers for connecting and managing Cybersec pipelines. The map value should be in the following format: [{\"name\": \"<cluster-name>\", \"bootstrap\": \"example.com:9092,example.com:9092,example.com:9092\"}, {\"name\": \"<cluster-name2>\", \"bootstrap\": \"example2.com:9092,example2.com:9092,example2.com:9092\"}, ...]",
          "type": "string",
          "configurableInWizard": true
        },
        {
          "name": "server_pipeline_dir",
          "label": "Pipeline Configuration Directory Path",
          "description": "The file system path where the pipeline configuration files are stored. This directory contains all the necessary configuration files for managing and executing data pipelines on UI.",
          "configName": "server.pipelineDir",
          "type": "path",
          "pathType": "localDataDir",
          "default": "/var/lib/cybersec/pipelines",
          "required": "true",
          "mode": "0740"
        },
        {
          "name": "server_auto_offset",
          "label": "Spring Kafka Consumer Auto-Offset Reset for CYBERSEC_UI.",
          "description": "Configuration for the auto-offset-reset policy in the Spring Kafka consumer. This setting determines the behavior when there is no initial offset or if the current offset does not exist. Valid values are 'earliest' to start from the beginning of the log and 'latest' to start from the end of the log.",
          "configName": "spring.kafka.consumer.auto-offset-reset",
          "type": "string_enum",
          "default": "earliest",
          "validValues": [
            "earliest",
            "latest"
          ]
        },
        {
          "name": "server_enable_auto_commit",
          "label": "Spring Kafka Consumer Enable Auto-Commit for CYBERSEC_UI.",
          "description": "Configuration for enabling or disabling auto-commit of offsets in the Spring Kafka consumer. When set to 'true', the consumer's offset will be periodically committed in the background. When set to 'false', offset commits must be handled manually.",
          "configName": "spring.kafka.consumer.enable-auto-commit",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "server_kafka_producer_key_serializer",
          "label": "Kafka Producer Key Serializer for CYBERSEC_UI.",
          "description": "The class used for serializing the keys of Kafka producer records. This serializer converts the key objects into a byte stream that can be sent to Kafka. The default value is 'org.apache.kafka.common.serialization.StringSerializer'.",
          "configName": "spring.kafka.producer.key-serializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        {
          "name": "server_kafka_producer_value_deserializer",
          "label": "Kafka Producer Value Serializer for CYBERSEC_UI.",
          "description": "The class used for serializing the values of Kafka producer records. This serializer converts the value objects into a byte stream that can be sent to Kafka. The default value is 'org.apache.kafka.common.serialization.StringSerializer'.",
          "configName": "spring.kafka.producer.value-serializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        {
          "name": "server_kafka_consumer_key_deserializer",
          "label": "Kafka Consumer Key Deserializer for CYBERSEC_UI.",
          "description": "The class used for deserializing the keys of Kafka consumer records. This deserializer converts the byte stream received from Kafka into key objects that can be processed by the consumer. The default value is 'org.apache.kafka.common.serialization.StringDeserializer'.",
          "configName": "spring.kafka.consumer.key-deserializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        {
          "name": "server_kafka_consumer_value_deserializer",
          "label": "Kafka Consumer Value Deserializer",
          "description": "The class used for deserializing the values of Kafka consumer records. This deserializer converts the byte stream received from Kafka into value objects that can be processed by the consumer. The default value is 'org.apache.kafka.common.serialization.StringDeserializer'.",
          "configName": "spring.kafka.consumer.value-deserializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        {
          "name": "server_request_topic",
          "label": "Request Topic name for communication between UI and worker.",
          "description": "The Kafka topic used for sending negotiation requests to communicate with workers in the Cybersec system. This topic facilitates the coordination and interaction between the server and worker nodes.",
          "configName": "spring.kafka.requestTopic",
          "type": "string",
          "default": "cybersec.requestTopic",
          "configurableInWizard": true
        },
        {
          "name": "server_response_topic",
          "label": "Response Topic name for communication between UI and worker.",
          "description": "The Kafka topic used for sending negotiation requests to communicate with workers in the Cybersec system. This topic facilitates the coordination and interaction between the server and worker nodes.",
          "configName": "spring.kafka.replyTopic",
          "default": "cybersec.responseTopic",
          "type": "string",
          "configurableInWizard": true
        },
        {
          "name": "server_group_id",
          "label": "Cybersec Consumer Group ID",
          "description": "The identifier for the consumer group used by the Cybersec server. This ID ensures that multiple consumers can coordinate and share load by belonging to the same group. Each consumer group is identified by a unique ID.",
          "configName": "server.group.id",
          "type": "string",
          "default": "server.group.id"
        },
        {
          "name": "config_path",
          "label": "Configuration Directory Path",
          "description": "The file system path where the Cybersec configuration files are stored. This directory contains all the necessary configuration files for the Cybersec system.",
          "configName": "config.path",
          "type": "path",
          "pathType": "localDataDir",
          "default": "/var/lib/cybersec/config",
          "required": "true",
          "mode": "0740"
        },
        {
          "name": "logging.org.springframework.level",
          "label": "Logger org.springframework Logging Level",
          "description": "Logger org.springframework logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging.com.cloudera.cyber.level",
          "label": "Logger com.cloudera.cyber Logging Level",
          "description": "Logger com.cloudera.cyber logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging.com.cloudera.parserchains.level",
          "label": "Logger com.cloudera.parserchains Logging Level",
          "description": "Logger com.cloudera.parserchains logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging.org.apache.metron.level",
          "label": "Loggerorg.apache.metron Logging Level",
          "description": "Logger org.apache.metron logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging.smm.kafka.webservice.common.level",
          "label": "Logger smm.kafka.webservice.common Logging Level",
          "description": "Logger smm.kafka.webservice.common logging level.",
          "required": "false",
          "default": "DEBUG",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "logging.org.apache.flink.level",
          "label": "Logger org.apache.flink Logging Level",
          "description": "Logger org.apache.flink logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        }
      ],
      "kerberosPrincipals": [
        {
          "name": "cybersec_service_principal",
          "primary": "${principal}",
          "instance": "${host}"
        },
        {
          "name": "spnego_service_principal",
          "primary": "HTTP",
          "instance": "${host}"
        }
      ],
      "sslServer": {
        "keyIdentifier": "parser_ui_chaining",
        "enabledConfigName": "ssl_enabled",
        "keystoreLocationConfigName": "ssl_server_keystore_location",
        "keystorePasswordConfigName": "ssl_server_keystore_password",
        "keyPasswordOptionality": "required",
        "keystoreKeyPasswordConfigName": "ssl_server_keystore_keypassword",
        "autoTlsMode": "auto"
      },
      "sslClient": {
        "truststoreLocationConfigName": "security.ssl.rest.truststore",
        "truststorePasswordConfigName": "security.ssl.rest.truststore-password"
      },
      "configWriter": {
        "generators": [
          {
            "filename": "cybersec-conf/parser-ui.properties",
            "configFormat": "jinja",
            "template": "aux/templates/parser-ui.properties.j2",
            "kerberosPrincipals": [
            ],
            "includedParams": [
              "server_ui_port",
              "config_path",
              "server_pipeline_dir",
              "clusters_kafka_map",
              "server_auto_offset",
              "server_enable_auto_commit",
              "server_kafka_producer_key_serializer",
              "server_kafka_producer_value_deserializer",
              "server_kafka_consumer_key_deserializer",
              "server_kafka_consumer_value_deserializer",
              "server_request_topic",
              "server_response_topic",
              "server_group_id"
            ],
            "additionalConfigs": [
              {
                "key": "logging_config",
                "value": "cybersec-conf/logback.xml"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "CYBER_WORKER",
      "label": "Cybersec worker",
      "pluralLabel": "Cybersec workers",
      "jvmBased": true,
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start-worker"
        ],
        "environmentVariables": {
          "SERVER_SSL_KEY_STORE": "${ssl_server_keystore_location}",
          "SERVER_SSL_KEY_STORE_PASSWORD": "${ssl_server_keystore_password}",
          "SERVER_SSL_KEY_PASSWORD": "${ssl_server_keystore_keypassword}",
          "SERVER_SSL_KEY_STORE_TYPE": "jks",
          "SERVER_SSL_ENABLED": "${ssl_enabled}"
        }
      },
      "topology": {
        "maxInstances": "1"
      },
      "logging": {
        "dir": "/var/log/cybersec",
        "configFilename": "cybersec-conf/logback.xml",
        "filename": "cybersec-worker-${host}.log",
        "configName": "logging.config",
        "modifiable": true,
        "loggingType": "logback",
        "additionalConfigs": [
          {
            "key": "logger1",
            "value": "<logger  name=\"org.springframework\" level=\"${cluster.logging.org.springframework.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger2",
            "value": "<logger name=\"com.cloudera.cyber\" level=\"${cluster.logging.com.cloudera.cyber.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger3",
            "value": "<logger name=\"com.cloudera.parserchains\" level=\"${cluster.logging.com.cloudera.parserchains.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger4",
            "value": "<logger name=\"org.apache.metron\" level=\"${cluster.logging.org.apache.metron.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger5",
            "value": "<logger name=\"org.apache.flink\" level=\"${cluster.logging.org.apache.flink.level}\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          },
          {
            "key": "logger6",
            "value": "<logger name=\"org.apache\" level=\"INFO\" additivity=\"false\"><appender-ref ref=\"RFA\"/></logger>"
          }
        ]
      },
      "parameters": [
        {
          "name": "cluster_name",
          "label": "Cybersec worker name.",
          "description": "The name assigned to the node within the Cybersec cluster. This name uniquely identifies the node within the cluster for coordination and management purposes.",
          "configName": "cluster.name",
          "type": "string"
        },
        {
          "name": "cluster_id",
          "label": "Cybersec worker ID.",
          "description": "The unique identifier assigned to the node within the Cybersec cluster. This ID is used to identify and manage the node within the cluster.",
          "configName": "cluster.id",
          "type": "string"
        },
        {
          "name": "cluster_status",
          "label": "Cybersec worker status",
          "description": "The operational status of the Cybersec cluster node. This status indicates whether the node is currently online and functioning or offline and not available.",
          "configName": "cluster.status",
          "default": "ONLINE",
          "type": "string_enum",
          "validValues": [
            "ONLINE",
            "OFFLINE"
          ]
        },
        {
          "name": "cluster_version",
          "label": "Cybersec worker version",
          "description": "The version of the Cybersec cluster. This version information helps in identifying the software version running on the cluster nodes.",
          "configName": "cluster.version",
          "type": "string"
        },
        {
          "name": "cluster_pipeline_dir",
          "label": "Pipeline Configuration Directory Path for worker service.",
          "description": "The file system path where the pipeline configuration files are stored within the cluster. This directory contains all the necessary configuration files for managing and executing data pipelines in the Cybersec cluster.",
          "configName": "cluster.pipelineDir",
          "type": "path",
          "pathType": "localDataDir",
          "required": "true",
          "mode": "0740",
          "default": "/var/lib/cybersec/pipelines"
        },
        {
          "name": "cluster_auto_offset",
          "label": "Worker Spring Kafka Auto-Offset Reset Configuration",
          "description": "Configuration for the auto-offset-reset policy in the Spring Kafka consumer within the cluster. This setting determines the behavior when there is no initial offset or if the current offset does not exist. Valid values are 'earliest' to start from the beginning of the log and 'latest' to start from the end of the log.",
          "configName": "spring.kafka.consumer.auto-offset-reset",
          "type": "string_enum",
          "default": "earliest",
          "validValues": [
            "earliest",
            "latest"
          ]
        },
        {
          "name": "cluster_enable_auto_commit",
          "label": "Worker Spring Kafka Enable Auto-Commit Configuration",
          "description": "Configuration for enabling or disabling auto-commit of offsets in the Spring Kafka consumer within the cluster. When set to 'true', the consumer's offset will be periodically committed in the background. When set to 'false', offset commits must be handled manually.",
          "configName": "spring.kafka.consumer.enable-auto-commit",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "cluster_kafka_producer_key_serializer",
          "label": "Worker Kafka Producer Key Serializer",
          "description": "The class used for serializing the keys of Kafka producer records within the Cybersec cluster. This serializer converts the key objects into a byte stream that can be sent to Kafka. The default value is 'org.apache.kafka.common.serialization.StringSerializer'.",
          "configName": "spring.kafka.producer.key-serializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        {
          "name": "cluster_kafka_producer_value_serializer",
          "label": "Worker kafka producer value serializer",
          "description": "The class used for serializing the values of Kafka producer records within the Cybersec cluster. This serializer converts the value objects into a byte stream that can be sent to Kafka. The default value is 'org.apache.kafka.common.serialization.StringSerializer'.",
          "configName": "spring.kafka.producer.value-serializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        {
          "name": "cluster_kafka_consumer_key_deserializer",
          "label": "Worker kafka consumer key deserializer",
          "description": "The class used for deserializing the keys of Kafka consumer records within the Cybersec worker. This deserializer converts the key objects into a byte stream that can be sent to Kafka. The default value is 'org.apache.kafka.common.serialization.StringDeserializer'.",
          "configName": "spring.kafka.consumer.key-deserializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        {
          "name": "cluster_kafka_consumer_value_deserializer",
          "label": "Worker kafka consumer value deserializer",
          "description": "The class used for deserializing the values of kafka consumer records within the Cybersec worker. This deserializer converts the value objects into a byte stream that can be sent to kafka. The default value is 'org.apache.kafka.common.serialization.StringDeserializer'.",
          "configName": "spring.kafka.consumer.value-deserializer",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        {
          "name": "cluster_kafka_bootstrap",
          "label": "Kafka bootstrap servers for worker communication",
          "description": "The list of Kafka bootstrap servers used by Cybersec worker to communicate with the CYBERSEC UI.",
          "configName": "spring.kafka.bootstrap-servers",
          "type": "string",
          "configurableInWizard": true
        },
        {
          "name": "cluster_request_topic",
          "label": "Request Topic name for communication between UI and worker.",
          "description": "The Kafka topic used for sending negotiation requests to communicate with workers in the Cybersec system. This topic facilitates the coordination and interaction between the server and worker nodes.",
          "configName": "spring.kafka.requestTopic",
          "type": "string",
          "default": "cybersec.requestTopic",
          "configurableInWizard": true
        },
        {
          "name": "cluster_response_topic",
          "label": "Response Topic name for communication between UI and worker.",
          "description": "The Kafka topic used for sending negotiation requests to communicate with workers in the Cybersec system. This topic facilitates the coordination and interaction between the server and worker nodes.",
          "configName": "spring.kafka.replyTopic",
          "default": "cybersec.responseTopic",
          "type": "string",
          "configurableInWizard": true
        },
        {
          "name": "cluster_group_id",
          "label": "Cybersec consumer worker group ID",
          "description": "The identifier for the consumer group used by the Cybersec worker. This ID ensures that multiple consumers can coordinate and share load by belonging to the same group. Each consumer group is identified by a unique ID.",
          "configName": "spring.kafka.consumer.group-id",
          "type": "string",
          "default": "cluster.group.id"
        },
        {
          "name": "cluster.logging.org.springframework.level",
          "label": "Logger org.springframework Logging Level",
          "description": "Logger org.springframework logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "cluster.logging.com.cloudera.cyber.level",
          "label": "Logger com.cloudera.cyber Logging Level",
          "description": "Logger com.cloudera.cyber logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "cluster.logging.com.cloudera.parserchains.level",
          "label": "Logger com.cloudera.parserchains Logging Level",
          "description": "Logger com.cloudera.parserchains logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "cluster.logging.org.apache.metron.level",
          "label": "Loggerorg.apache.metron Logging Level",
          "description": "Logger org.apache.metron logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "cluster.logging.smm.kafka.webservice.common.level",
          "label": "Logger smm.kafka.webservice.common Logging Level",
          "description": "Logger smm.kafka.webservice.common logging level.",
          "required": "false",
          "default": "DEBUG",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        },
        {
          "name": "cluster.logging.org.apache.flink.level",
          "label": "Logger org.apache.flink Logging Level",
          "description": "Logger org.apache.flink logging level.",
          "required": "false",
          "default": "INFO",
          "type": "string_enum",
          "validValues": [
            "INFO",
            "ERROR",
            "TRACE",
            "DEBUG",
            "WARN",
            "ALL",
            "OFF"
          ]
        }
      ],
      "kerberosPrincipals": [
        {
          "name": "cybersec_service_principal",
          "primary": "${principal}",
          "instance": "${host}"
        },
        {
          "name": "spnego_service_principal",
          "primary": "HTTP",
          "instance": "${host}"
        }
      ],
      "sslServer": {
        "keyIdentifier": "parser_ui_chaining",
        "enabledConfigName": "ssl_enabled",
        "keystoreLocationConfigName": "ssl_server_keystore_location",
        "keystorePasswordConfigName": "ssl_server_keystore_password",
        "keyPasswordOptionality": "required",
        "keystoreKeyPasswordConfigName": "ssl_server_keystore_keypassword",
        "autoTlsMode": "auto"
      },
      "sslClient": {
        "truststoreLocationConfigName": "security.ssl.rest.truststore",
        "truststorePasswordConfigName": "security.ssl.rest.truststore-password"
      },
      "configWriter": {
        "generators": [
          {
            "filename": "cybersec-conf/worker.properties",
            "configFormat": "properties",
            "kerberosPrincipals": [
            ],
            "includedParams": [
              "cluster_name",
              "cluster_id",
              "cluster_status",
              "cluster_version",
              "cluster_pipeline_dir",
              "cluster_kafka_bootstrap",
              "cluster_auto_offset",
              "cluster_enable_auto_commit",
              "cluster_kafka_producer_key_serializer",
              "cluster_kafka_producer_value_serializer",
              "cluster_kafka_consumer_key_deserializer",
              "cluster_kafka_consumer_value_deserializer",
              "cluster_request_topic",
              "cluster_response_topic",
              "cluster_group_id"
            ],
            "additionalConfigs": [
              {
                "key": "logging.config",
                "value": "cybersec-conf/logback.xml"
              },
              {
                "key": "kafka.reply.future.timeout",
                "value": "5000"
              },
              {
                "key": "kafka.reply.timeout",
                "value": "5000"
              }
            ]
          }
        ]
      }
    }
  ],
  "gateway": {
    "alternatives": {
      "name": "cybersec-conf",
      "linkRoot": "/etc/cybersec",
      "priority": 50
    },
    "scriptRunner": {
      "program": "scripts/control.sh",
      "environmentVariables": {
        "KERBEROS_ENABLED": "${kerberos.auth.enabled}"
      },
      "args": [
        "client"
      ]
    },
    "sslClient": {
      "truststoreFormat": "jks",
      "truststoreLocationConfigName": "ssl.client.truststore.location",
      "truststorePasswordConfigName": "ssl.client.truststore.password",
      "truststorePasswordCredentialProviderCompatible": true,
      "autoTlsMode": "auto"
    },
    "configWriter": {
      "generators": [
        {
          "filename": "cybersec-conf/kafka.properties",
          "configFormat": "jinja",
          "template": "aux/templates/kafka.properties.j2",
          "includedParams": [
            "ssl_client_truststore_location",
            "ssl_client_truststore_password",
            "schema_registry_url",
            "kafka_acks",
            "kafka_auto_offset_reset"
          ],
          "additionalConfigs": [
            {
              "key": "kafka.brokers.list",
              "value": "${kafka_brokers_list}"
            }
          ]
        },
        {
          "filename": "cybersec-conf/generator.properties",
          "configFormat": "properties",
          "includedParams": [
            "generator_eps",
            "generator_avro_flag",
            "generator_metrics",
            "default_parallelism",
            "default_checkpoint_interval_ms"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Generator"
            },
            {
              "key": "kafka.client.id",
              "value": "generator.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "generator.group.id"
            }
          ]
        },
        {
          "filename": "cybersec-conf/parser.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Parser"
            },
            {
              "key": "topic.output",
              "value": "triage.input"
            },
            {
              "key": "topic.error",
              "value": "parser.error"
            },
            {
              "key": "kafka.client.id",
              "value": "parser.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "parser.group.id"
            }
          ]
        },
        {
          "filename": "cybersec-conf/triage.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "enrichment_topic_input",
            "enrichment_topic_query_output",
            "query_input_topic",
            "query_output_topic",
            "geo_enabled",
            "geo_ip_fields",
            "geo_database_path",
            "asn_enabled",
            "asn_ip_fields",
            "asn_database_path",
            "hbase_enabled",
            "enrichments_config",
            "lookups_config_file",
            "rest_enabled",
            "rest_config_file",
            "stellar_enabled",
            "stellar_config_dir",
            "threatq_enabled",
            "threatq_config_file",
            "threatq_topic_input",
            "rules_enabled"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Triage"
            },
            {
              "key": "kafka.client.id",
              "value": "triage.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "triage.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.input"
            },
            {
              "key": "topic.output",
              "value": "triage.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/profile.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "query_input_topic",
            "query_output_topic",
            "profile_first_seen_table",
            "profile_first_seen_column_family",
            "phoenix_db_init",
            "phoenix_db_thin_url",
            "phoenix_db_thin_serialization",
            "phoenix_db_thin_authentication",
            "phoenix_db_thin_avatica_user",
            "phoenix_db_thin_avatica_password",
            "phoenix_db_batchSize",
            "phoenix_db_query_param_measurement_data_table_name",
            "phoenix_db_query_param_measurement_metadata_table_name",
            "phoenix_db_query_param_measurement_sequence_name",
            "phoenix_db_query_param_profile_metadata_table_name",
            "phoenix_db_query_param_profile_profile_sequence_name",
            "phoenix_db_query_param_measurement_sequence_start_with",
            "phoenix_db_query_param_measurement_sequence_cache",
            "phoenix_db_query_param_profile_sequence_start_with",
            "phoenix_db_query_param_profile_sequence_cache",
            "phoenix_db_query_param_field_key_count",
            "phoenix_db_interval_millis",
            "phoenix_db_max_retries_times"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Profile"
            },
            {
              "key": "kafka.client.id",
              "value": "profile.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "profile.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.output"
            },
            {
              "key": "topic.output",
              "value": "profile.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/hive-indexing.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "hive_catalog",
            "hive_schema",
            "hive_table",
            "hive_confdir",
            "hive_include_all",
            "hive_transaction_messages"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Hive Indexing"
            },
            {
              "key": "kafka.client.id",
              "value": "hive.indexing.client.id"
            },
            {
              "key": "kafka.group.id",
              "value": "hive.indexing.group.id"
            },
            {
              "key": "topic.input",
              "value": "triage.output"
            }
          ]
        },
        {
          "filename": "cybersec-conf/load-enrichment.properties",
          "configFormat": "properties",
          "includedParams": [
            "default_parallelism",
            "default_checkpoint_interval_ms",
            "enrichment_config_file",
            "enrichment_source_file",
            "enrichment_source_skipfirstline",
            "enrichment_source_columns"
          ],
          "additionalConfigs": [
            {
              "key": "flink.job.name",
              "value": "Job Enrichment Loading"
            }
          ]
        }
      ]
    },
    "parameters": [
      {
        "name": "schema_registry_url",
        "label": "Schema registry url",
        "description": "Schema registry server URL in the format http(s)://{schema-registry-host}:{schema-registry-port}/api/v1",
        "configName": "schema.registry.url",
        "type": "uri",
        "allowedSchemes": [
          "http",
          "https"
        ],
        "default": "",
        "configurableInWizard": true
      },
      {
        "name": "kafka_auto_offset_reset",
        "label": " Kafka offset reset policy",
        "description": "The auto offset reset kafka consumer configuration defines how the kafka consumer should behave when consuming from a topic partition when there is no initial offset.",
        "configName": "kafka.auto.offset.reset",
        "type": "string_enum",
        "validValues": [
          "earliest",
          "latest"
        ],
        "default": "earliest"
      },
      {
        "name": "kafka_acks",
        "label": " Kafka client acknowledgements",
        "description": "Indicates the number of brokers that must receive a record before it is marked as a successful record.",
        "configName": "kafka.acks",
        "type": "string_enum",
        "validValues": [
          "0",
          "1",
          "all"
        ],
        "default": "all"
      },
      {
        "name": "generator_eps",
        "label": "Generator eps",
        "description": "Indicates the number of records generated by the generator per second.",
        "configName": "generator.eps",
        "type": "long",
        "min": 0,
        "default": 100
      },
      {
        "name": "generator_avro_flag",
        "label": "Generator Avro",
        "description": "Specifies whether the generator should create records in avro format.",
        "configName": "generator.avro.flag",
        "type": "boolean",
        "default": false
      },
      {
        "name": "generator_metrics",
        "label": "Generator metrics",
        "description": "Kafka topic for generator metrics.",
        "configName": "generator.metrics",
        "type": "string",
        "default": "generator.count"
      },
      {
        "name": "chain_file",
        "label": "Chain file path",
        "description": "Path to file with chain configuration",
        "configName": "chain.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "key_private_file",
        "label": "Key private file",
        "description": "Path to private key.",
        "configName": "key.private.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "chain_topic_map",
        "label": "Chain topic Map",
        "description": "Map topic to a configuration.",
        "configName": "chain.topic.map",
        "type": "string",
        "default": "{\"squid\" : {\"chainKey\": \"squid\", \"source\" : \"squid\"}}"
      },
      {
        "name": "chain_enrichments_file",
        "label": "Chain enrichments file",
        "description": "File with enrichment configuration.",
        "configName": "chain.enrichments.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichments_table_default",
        "label": "Batch loader hbase table",
        "description": "The default table where the batch loader job puts enrichment data in hbase.",
        "configName": "enrichments.table",
        "type": "string",
        "default": "simple_enrich"
      },
      {
        "name": "enrichments_config",
        "label": "Enrichment configuration",
        "description": "The default path to enrichment configuration file.",
        "configName": "enrichments.config",
        "type": "string",
        "default": ""
      },
      {
        "name": "lookups_config_file",
        "label": "Lookups configuration",
        "description": "The default path to lookups configuration file.",
        "configName": "lookups.config.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "signature_enabled",
        "label": "Signature enabled",
        "description": "Enable signature",
        "configName": "signature.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "default_parallelism",
        "label": "Job parallelism level",
        "description": "The default number of slots that a TaskManager offers.",
        "configName": "parallelism",
        "type": "long",
        "min": 0,
        "default": 1
      },
      {
        "name": "default_checkpoint_interval_ms",
        "label": "Checkpoint interval ms",
        "description": "Default checkpoint interval configures how often Flink will take these snapshots.",
        "configName": "checkpoint.interval.ms",
        "type": "long",
        "min": 0,
        "default": 60000
      },
      {
        "name": "geo_enabled",
        "label": "GEO feature",
        "description": "Enable the geoenrichment feature by default.",
        "configName": "geo.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "asn_enabled",
        "label": "ASN feature",
        "description": "Enable the asnenrichment feature by default.",
        "configName": "asn.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "hbase_enabled",
        "label": "Hbase enrichment feature",
        "description": "Enable the hbase enrichment feature by default.",
        "configName": "hbase.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "rest_enabled",
        "label": "Rest enrichment feature",
        "description": "Enable the rest enrichment feature by default.",
        "configName": "rest.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "rules_enabled",
        "label": "Rules enrichment feature",
        "description": "Enable the rule enrichment feature by default.",
        "configName": "rules.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "threatq_enabled",
        "label": "Threatq enrichment feature",
        "description": "Enable the threatq enrichment feature by default.",
        "configName": "threatq.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "stellar_enabled",
        "label": "Stellar enrichment feature",
        "description": "Enable the stellar enrichment feature by default.",
        "configName": "stellar.enabled",
        "type": "boolean",
        "default": false
      },
      {
        "name": "stellar_config_dir",
        "label": "Path to stellar dir",
        "description": "Path to directory with stellar configs.",
        "configName": "stellar.config.dir",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/stellar"
      },
      {
        "name": "query_input_topic",
        "label": "Scoring command input topic",
        "description": "Default input topic for scoring command.",
        "configName": "query.input.topic",
        "type": "string",
        "default": "scoring.rules.input"
      },
      {
        "name": "query_output_topic",
        "label": "Scoring command output topic",
        "description": "Default output topic for scoring command.",
        "configName": "query.output.topic",
        "type": "string",
        "default": "scoring.rules.out"
      },
      {
        "name": "rest_config_file",
        "label": "Rest config file",
        "description": "The default path to rest config file.",
        "configName": "rest.config.file",
        "type": "string",
        "default": "rest-config.json"
      },
      {
        "name": "threatq_config_file",
        "label": "Threatq config file",
        "description": "The default path to threatq config file.",
        "configName": "threatq.config.file",
        "type": "string",
        "default": "threatq.json"
      },
      {
        "name": "threatq_topic_input",
        "label": "Threatq topic ",
        "description": "The default topic of threatq data.",
        "configName": "threatq.topic.input",
        "type": "string",
        "default": "threats"
      },
      {
        "name": "geo_ip_fields",
        "label": "Geo fields",
        "description": "The list of fields that is used for GEO enrichment.",
        "configName": "geo.ip_fields",
        "type": "string",
        "default": "ip_src_addr,ip_dst_addr,ip_dst,ip_src"
      },
      {
        "name": "geo_database_path",
        "label": "Geo path",
        "description": "The path to MaxMind geo city database.",
        "configName": "geo.database_path",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/GeoLite2-City.mmdb"
      },
      {
        "name": "asn_ip_fields",
        "label": "Asn fields",
        "description": "The list of fields that is used for GEO enrichment.",
        "configName": "asn.ip_fields",
        "type": "string",
        "default": "ip_src_addr,ip_dst_addr,ip_dst,ip_src"
      },
      {
        "name": "asn_database_path",
        "label": "Asn path",
        "description": "The path to MaxMind asn database.",
        "configName": "asn.database_path",
        "type": "string",
        "default": "hdfs:/user/cybersec/data/GeoLite2-ASN.mmdb"
      },
      {
        "name": "enrichment_topic_input",
        "label": "Enrichment input topic",
        "description": "Default enrichment topic for triage job.",
        "configName": "enrichment.topic.input",
        "type": "string",
        "default": "triage.enrichments"
      },
      {
        "name": "enrichment_topic_query_output",
        "label": "Enrichment output topic",
        "description": "Default enrichment output topic for triage job.",
        "configName": "enrichment.topic.query.output",
        "type": "string",
        "default": "triage.enrichments.response"
      },
      {
        "name": "profile_first_seen_table",
        "label": "Profile hbase table",
        "description": "Default hbase table for profiling job.",
        "configName": "profile.first.seen.table",
        "type": "string",
        "default": "enrichments"
      },
      {
        "name": "profile_first_seen_column_family",
        "label": "Profile hbase column family",
        "description": "Default hbase column family for profiling job.",
        "configName": "profile.first.seen.column.family",
        "type": "string",
        "default": "first_seen"
      },
      {
        "name": "phoenix_db_init",
        "label": "Phoenix initialize db",
        "description": "Init the phoenix database.",
        "configName": "phoenix.db.init",
        "type": "boolean",
        "default": true
      },
      {
        "name": "phoenix_db_thin_url",
        "label": "Phoenix db url",
        "description": "Phoenix to the avatica url.",
        "configName": "phoenix.db.thin.url",
        "type": "uri",
        "allowedSchemes": [
          "http",
          "https"
        ],
        "default": "http://localhost.localhost:8765"
      },
      {
        "name": "phoenix_db_thin_serialization",
        "label": "Phoenix db thin serialization",
        "description": "Phoenix serialization schema.",
        "configName": "phoenix.db.thin.serialization",
        "type": "string",
        "default": "PROTOBUF"
      },
      {
        "name": "phoenix_db_thin_authentication",
        "label": "Phoenix authentication",
        "description": "Phoenix authentication mechanism.",
        "configName": "phoenix.db.thin.authentication",
        "type": "string",
        "default": "SPNEGO"
      },
      {
        "name": "phoenix_db_thin_avatica_user",
        "label": "Phoenix thin client user",
        "description": "Phoenix thin client user.",
        "configName": "phoenix.db.thin.avatica_user",
        "type": "string",
        "default": ""
      },
      {
        "name": "phoenix_db_thin_avatica_password",
        "label": "Phoenix thin client password",
        "description": "Phoenix thin client password.",
        "configName": "phoenix.db.thin.avatica_password",
        "type": "password",
        "default": ""
      },
      {
        "name": "phoenix_db_batchSize",
        "label": "Phoenix thin client password",
        "description": "Phoenix thin client password.",
        "configName": "phoenix.db.batchSize",
        "type": "long",
        "min": 0,
        "default": 40
      },
      {
        "name": "phoenix_db_query_param_measurement_data_table_name",
        "label": "Phoenix measurement data table",
        "description": "Phoenix measurement data table.",
        "configName": "phoenix.db.query.param.measurement_data_table_name",
        "type": "string",
        "default": "prf_measure"
      },
      {
        "name": "phoenix_db_query_param_measurement_metadata_table_name",
        "label": "Phoenix measurement meta data table",
        "description": "Phoenix measurement meta data table.",
        "configName": "phoenix.db.query.param.measurement_metadata_table_name",
        "type": "string",
        "default": "prf_measure_meta"
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_name",
        "label": "Phoenix sequence measurement id",
        "description": "Phoenix sequence measurement id.",
        "configName": "phoenix.db.query.param.measurement_sequence_name",
        "type": "string",
        "default": "prf_measure_seq"
      },
      {
        "name": "phoenix_db_query_param_profile_metadata_table_name",
        "label": "Phoenix profile meta data",
        "description": "Phoenix profile meta data.",
        "configName": "phoenix.db.query.param.profile_metadata_table_name",
        "type": "string",
        "default": "prf_meta"
      },
      {
        "name": "phoenix_db_query_param_profile_profile_sequence_name",
        "label": "Phoenix sequence for profile meta data",
        "description": "Phoenix sequence for profile meta data.",
        "configName": "phoenix.db.query.param.profile_sequence_name",
        "type": "string",
        "default": "prf_meta"
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_start_with",
        "label": "Phoenix measurement sequence start id",
        "description": "Phoenix measurement sequence id starts from.",
        "configName": "phoenix.db.query.param.measurement_sequence_start_with",
        "type": "long",
        "default": 0
      },
      {
        "name": "phoenix_db_query_param_measurement_sequence_cache",
        "label": "Phoenix sequence cache size",
        "description": "Phoenix measurement sequence cache size.",
        "configName": "phoenix.db.query.param.measurement_sequence_cache",
        "type": "long",
        "min": 0,
        "default": 20
      },
      {
        "name": "phoenix_db_query_param_profile_sequence_start_with",
        "label": "Phoenix sequence profile id starts",
        "description": "Phoenix sequence id starts from.",
        "configName": "phoenix.db.query.param.profile_sequence_start_with",
        "type": "long",
        "default": 0
      },
      {
        "name": "phoenix_db_query_param_profile_sequence_cache",
        "label": "Phoenix profile sequence cache size",
        "description": "Phoenix profile sequence cache size.",
        "configName": "phoenix.db.query.param.profile_sequence_cache",
        "type": "long",
        "min": 0,
        "default": 20
      },
      {
        "name": "phoenix_db_query_param_field_key_count",
        "label": "Phoenix field key count",
        "description": "Number of fields for profile types in phoenix.",
        "configName": "phoenix.db.query.param.field_key_count",
        "type": "long",
        "min": 0,
        "default": 10
      },
      {
        "name": "phoenix_db_interval_millis",
        "label": "Phoenix db interval millis",
        "description": "Phoenix minimal interval between transactions.",
        "configName": "phoenix.db.interval_millis",
        "type": "long",
        "min": 0,
        "default": 60000
      },
      {
        "name": "phoenix_db_max_retries_times",
        "label": "Phoenix minimal retries count",
        "description": "Phoenix minimal retries count.",
        "configName": "phoenix.db.max_retries_times",
        "type": "long",
        "min": 0,
        "default": 3
      },
      {
        "name": "hive_catalog",
        "label": "Hive catalog",
        "description": "Hive catalog.",
        "configName": "hive.catalog",
        "type": "string",
        "default": "hive"
      },
      {
        "name": "hive_schema",
        "label": "Hive schema",
        "description": "Hive catalog.",
        "configName": "hive.schema",
        "type": "string",
        "default": "cyber"
      },
      {
        "name": "hive_table",
        "label": "Hive table",
        "description": "Hive table.",
        "configName": "hive.table",
        "type": "string",
        "default": "events"
      },
      {
        "name": "hive_confdir",
        "label": "Hive configuration directory",
        "description": "Hive configuration directory.",
        "configName": "hive.confdir",
        "type": "string",
        "default": "/etc/hive/conf/"
      },
      {
        "name": "hive_include_all",
        "label": "Hive include all",
        "description": "Hive include all.",
        "configName": "hive.include.all",
        "type": "boolean",
        "default": true
      },
      {
        "name": "hive_transaction_messages",
        "label": "Hive transaction messages",
        "description": "Hive transaction messages.",
        "configName": "hive.transaction.messages",
        "type": "long",
        "min": 0,
        "default": 500
      },
      {
        "name": "enrichment_config_file",
        "label": "Enrichment loading file",
        "description": "The default enrichment loading configuration file.",
        "configName": "enrichment.config.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichment_source_file",
        "label": "Enrichment source file",
        "description": "The default enrichment loading source file.",
        "configName": "enrichment.source.file",
        "type": "string",
        "default": ""
      },
      {
        "name": "enrichment_source_skipfirstline",
        "label": "Skip first line",
        "description": "Skip the first line of source csv file for enrichment loading.",
        "configName": "enrichment.source.skipfirstline",
        "type": "boolean",
        "default": true
      },
      {
        "name": "enrichment_source_columns",
        "label": "Enrichment source columns",
        "description": "The list of enrichment loading columns.",
        "configName": "enrichment.source.columns",
        "type": "string",
        "default": "rank,,domain,,,,,,,,,"
      }
    ]
  }
}
