#!/usr/bin/env bash

#
# Copyright 2020 - 2022 Cloudera. All Rights Reserved.
#
# This file is licensed under the Apache License Version 2.0 (the "License"). You may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. Refer to the License for the specific permissions and
# limitations governing your use of the file.
#

# Determine the location of the script to locate parcel
# Reference: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
BIN_DIR="$(dirname "$SOURCE")"
while [ -h "$SOURCE" ]
do
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  BIN_DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
BIN_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Populate necessary environment variables
source $BIN_DIR/env.sh

usage="$(basename "$0") -- loads enrichment name value pairs into hbase or flink state

where:
    -h  show help
    --pipe pipeline name
    --enrich enrichment type to load
    --file Path to enrichment file in local storage or hdfs
    "

opts=$(getopt \
    --longoptions "branch:,pipe:,enrich:,file:,help::" \
    --options "b:p:e:f:h::" \
    --name "$(basename "$0")" \
    -- "$@"
)

if [ $? -ne 0 ]
then
    echo "$usage"
    exit 1
fi

eval set --$opts
while [ : ]; do
  case "$1" in
    -b | --branch) branch="$2"
    shift 2
    ;;
    -p | --pipe) pipeline="$2"
    shift 2
    ;;
    -e | --enrich) enrichment_type="$2"
    shift 2
    ;;
    -f | --file) enrichment_file="$2"
    shift 2
    ;;
    -h | --help) echo "$usage"
       exit 0
    ;;
    --) shift; break;;
    *) echo "Illegal option"; exit 1;;
  esac
done

if [ ! -d "$pipeline" ]; then
  echo "ERROR: $0 Pipeline $pipeline does not exist" >&2
  exit 1
fi

if [ -z "$branch" ]; then
  echo "ERROR: $0  Specify branch with -b or --branch option. " >&2
  exit 1
fi

enrichment_prop_template="$pipeline/triage/load_$enrichment_type.properties.template"
if [ ! -f "$enrichment_prop_template" ]; then
  echo "ERROR: $0 Enrichment type $enrichment_type does not exist" >&2
  exit 1
fi

ship_enrichment_file=()
configure_enrich_file=$enrichment_file
hdfs_regex='hdfs.*'
if ! [[ "$enrichment_file" =~ $hdfs_regex ]]; then
  if [ -f "$enrichment_file" ]; then
      ship_enrichment_file+=("-y" "$enrichment_file")
      configure_enrich_file=$(basename "$enrichment_file")
  else
      echo "ERROR: $0 Enrichment file '$enrichment_file' does not exist" >&2
      exit 1
  fi
else
  hdfs dfs -test -f "$enrichment_file"
  if [ "$?" -ne 0 ]; then
     echo "ERROR: $0 Enrichment file '$enrichment_file' does not exist" >&2
    exit 1
  fi
fi

generated_load_dir="generated/$pipeline/triage"
mkdir -p "$generated_load_dir"
generated_load_props="$generated_load_dir/load_$enrichment_type.properties"
echo "# GENERATED FILE - EDITS WILL BE OVERWRITTEN - EDIT load_$enrichment_type.properties.template instead." > $generated_load_props
echo "enrichment.source.file=$configure_enrich_file" >> $generated_load_props
sed -e s/BRANCH/$branch/g $enrichment_prop_template >> $generated_load_props

generated_enrichment_storage_file="enrichments-storage.json"
enrichment_storage_template="${generated_enrichment_storage_file}.template"
generated_enrichment_storage="$generated_load_dir/$generated_enrichment_storage_file"
sed -e s/BRANCH/$branch/g "$pipeline/triage/$enrichment_storage_template" > $generated_enrichment_storage

cs-start-job -o -j flink-enrichment-loading "${ship_enrichment_file[@]}" -p kafka.properties -p /etc/cybersec/conf/load-enrichment.properties -p "$generated_load_props"
