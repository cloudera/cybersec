#!/usr/bin/env bash
#
# Copyright 2020 - 2022 Cloudera. All Rights Reserved.
#
# This file is licensed under the Apache License Version 2.0 (the "License"). You may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. Refer to the License for the specific permissions and
# limitations governing your use of the file.
#

# Determine the location of the script to locate parcel
# Reference: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
BIN_DIR="$(dirname "$SOURCE")"
while [ -h "$SOURCE" ]
do
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  BIN_DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
BIN_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Populate necessary environment variables
source $BIN_DIR/env.sh

YARN_JOB_MANAGER_MEMORY="2048"
YARN_TASK_MANAGER_MEMORY="2048"

savepoint_options=()
classpath_options=()
job_properties=()
ship_options=()


# include_job_properties <file name>
# Include the specified file in the list of property files sent to the job.
# Extract any settings to use as job command line options
include_job_properties() {
  job_properties+=("$1")

  property_setting=$(get_property_value "$1" "flink.job.manager.memory.mb")
  YARN_JOB_MANAGER_MEMORY=${property_setting:-"${YARN_JOB_MANAGER_MEMORY}"}
  echo  "INFO: $1: Job Manager Memory = $YARN_JOB_MANAGER_MEMORY" >&2

  property_setting=$(get_property_value "$1" "flink.task.manager.memory.mb")
  YARN_TASK_MANAGER_MEMORY=${property_setting:-"${YARN_TASK_MANAGER_MEMORY}"}
  echo  "INFO: $1: Task Manager Memory = $YARN_TASK_MANAGER_MEMORY" >&2

  property_setting=$(get_property_value "$1" "flink.job.name")
  FLINK_JOB_NAME=${property_setting:-"${FLINK_JOB_NAME}"}
  echo  "INFO: $1: Flink Job Name = $FLINK_JOB_NAME" >&2
}

usage="$(basename "$0")  -- starts cybersec job

where:
    -h show help
    -j flink job jar
    -y directory to ship
    -c add file or directory to classpath
    -n Yarn job name
    -p property file name
    -s save point
    -o override hbase config files
    "

while getopts "j:y:c:n:p:s:h:o" option; do
  case $option in
  j)
    JOB_JAR=$(cs-lookup-jar "$OPTARG")
    ;;
  y)
    ship_config "-yt" "$OPTARG"
    ;;
  c)
    classpath_options+=("--classpath" 'file://'"$OPTARG")
    ;;
  n)
    YARN_NAME="$OPTARG"
    ;;
  p)
    include_job_properties "$OPTARG"
    ;;
  s)
    savepoint_options=("--allowNonRestoredState" "-s" "$OPTARG")
    ;;
  o)
      override_hbase
      ;;
  h)
    echo "$usage"
    exit 0
    ;;
  \?)
    echo "Invalid option -$OPTARG" >&2
    exit 1
    ;;
  esac

  case $OPTARG in
  -*)
    echo "Option $option needs a valid argument"
    exit 1
    ;;
  esac
done

if [ -z "$JOB_JAR" ]; then
  echo "ERROR: Specify job jar with -j option." >&2
  exit 1
fi

if [ "${#job_properties[@]}" -eq 0 ]; then
  echo "ERROR: Specify at least one job property file with -p option" >&2
  exit 1
fi

YARN_NAME=${YARN_NAME:-$FLINK_JOB_NAME}
if [ -z "$YARN_NAME" ]; then
  echo "ERROR: Set flink.job.name in job property file or use -n option" >&2
  exit 1
fi

init_key_store
get_kerberos_config

job_properties=("$CYBERSEC_CONF_DIR/kafka.properties" "${job_properties[@]}")

job_properties=("/etc/cybersec/conf/kafka.properties" "${job_properties[@]}")

ship_config "-yt" "configs"

flink run \
  "${savepoint_options[@]}" \
  "${classpath_options[@]}" \
  "${ship_options[@]}" \
  --jobmanager yarn-cluster -yjm "$YARN_JOB_MANAGER_MEMORY" -ytm "$YARN_TASK_MANAGER_MEMORY" --detached --yarnname "$YARN_NAME" \
  "${security_options[@]}" \
  "${JOB_JAR}" "${job_properties[@]}"
