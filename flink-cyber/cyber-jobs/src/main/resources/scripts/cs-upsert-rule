#!/usr/bin/env bash
#
# Copyright 2020 - 2022 Cloudera. All Rights Reserved.
#
# This file is licensed under the Apache License Version 2.0 (the "License"). You may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. Refer to the License for the specific permissions and
# limitations governing your use of the file.
#

# Reference: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
BIN_DIR="$(dirname "$SOURCE")"
while [ -h "$SOURCE" ]
do
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  BIN_DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
BIN_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Populate necessary environment variables
source $BIN_DIR/env.sh

stage="triage"

usage="$(basename "$0") -- upserts triage or profile scoring rule

where:
    -h  show help
    --branch branch of pipeline
    --pipe pipeline name
    --profile Name of profile for profile scoring rules - omit for triage
    --rule Rule .json file
    "

opts=$(getopt \
    --longoptions "pipe:,branch:,profile:,rule:,help::" \
    --options "p:b:n:r:h::" \
    --name "$(basename "$0")" \
    -- "$@"
)

if [ $? -ne 0 ]
then
    echo "$usage"
    exit 1
fi

eval set --$opts
while [ : ]; do
  case "$1" in
    -p | --pipe) pipeline="$2"
    shift 2
    ;;
    -b | --branch) branch="$2"
    shift 2
    ;;
    -n | --profile) profile="$2"
    stage="profile/$profile"
    shift 2
    ;;
    -r | --rule) rule_file="$2"
    shift 2
    ;;
    -h | --help) echo "$usage"
       exit 0
    ;;
    --) shift; break;;
    *) echo "Illegal option"; exit 1;;
  esac
done

if [ ! -d "$pipeline" ]; then
  echo "ERROR: $0 Pipeline $pipeline does not exist" >&2
  exit 1
fi

if [ -z "$branch" ]; then
  echo "ERROR: $0  Specify branch with -b or --branch option. " >&2
  exit 1
fi

if [ -z "$profile" ]; then
  property_file=$pipeline/triage/triage.properties.template
  generated_dir=generated/$pipeline/triage
else
  if [ ! -d "$pipeline/profile/$profile" ]; then
    echo "ERROR: $0 Profile $profile does not exist" >&2
    exit 1
  fi
  property_file=$pipeline/profile/$profile/profile.properties.template
  generated_dir=generated/$pipeline/profile/$profile
fi

rule=$pipeline/$stage/rules/$rule_file
if [ ! -f "$rule" ]; then
  echo "ERROR: $0 Rule  $rule does not exist" >&2
  exit 1
fi

mkdir -p "$generated_dir"
upsert_props=$generated_dir/upsert.properties

if [ -f "kafka.properties" ]; then
  cat kafka.properties > "$upsert_props"
else
  cat $CYBERSEC_CONF_DIR/kafka.properties > "$upsert_props"
fi
cat "$property_file" | grep query. |  sed -e s/BRANCH/$branch/g >> "$upsert_props"

run_java_class 'scoring-commands*.jar' com.cloudera.cyber.scoring.UpsertScoringRule "$upsert_props" "$rule"
